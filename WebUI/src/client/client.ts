//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    address(): Promise<AddressModel[]> {
        let url_ = this.baseUrl + "/api/Address";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddress(_response);
        });
    }

    protected processAddress(response: Response): Promise<AddressModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AddressModel.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AddressModel[]>(null as any);
    }

    /**
     * @return OK
     */
    address2(customerId: number): Promise<AddressModel[]> {
        let url_ = this.baseUrl + "/api/Address/{customerId}";
        if (customerId === undefined || customerId === null)
            throw new globalThis.Error("The parameter 'customerId' must be defined.");
        url_ = url_.replace("{customerId}", encodeURIComponent("" + customerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddress2(_response);
        });
    }

    protected processAddress2(response: Response): Promise<AddressModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AddressModel.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AddressModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createAddress(body?: AddressModel | undefined): Promise<AddressModel> {
        let url_ = this.baseUrl + "/api/Address/CreateAddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateAddress(_response);
        });
    }

    protected processCreateAddress(response: Response): Promise<AddressModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddressModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AddressModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateAddress(body?: AddressModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Address/UpdateAddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateAddress(_response);
        });
    }

    protected processUpdateAddress(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    deleteAddress(addressId: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Address/DeleteAddress/{addressId}";
        if (addressId === undefined || addressId === null)
            throw new globalThis.Error("The parameter 'addressId' must be defined.");
        url_ = url_.replace("{addressId}", encodeURIComponent("" + addressId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAddress(_response);
        });
    }

    protected processDeleteAddress(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    customersAll(): Promise<CustomerModel[]> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCustomersAll(_response);
        });
    }

    protected processCustomersAll(response: Response): Promise<CustomerModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CustomerModel.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerModel[]>(null as any);
    }

    /**
     * @return OK
     */
    customers(id: number): Promise<CustomerModel> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCustomers(_response);
        });
    }

    protected processCustomers(response: Response): Promise<CustomerModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerModel>(null as any);
    }

    /**
     * @return OK
     */
    withChildren(id: number): Promise<CustomerWithFKsModel> {
        let url_ = this.baseUrl + "/api/Customers/withChildren/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWithChildren(_response);
        });
    }

    protected processWithChildren(response: Response): Promise<CustomerWithFKsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerWithFKsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerWithFKsModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createCustomer(body?: Customer | undefined): Promise<CustomerModel> {
        let url_ = this.baseUrl + "/api/Customers/CreateCustomer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCustomer(_response);
        });
    }

    protected processCreateCustomer(response: Response): Promise<CustomerModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateCustomer(body?: CustomerModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Customers/UpdateCustomer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCustomer(_response);
        });
    }

    protected processUpdateCustomer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    deleteCustomer(id: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Customers/DeleteCustomer/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCustomer(_response);
        });
    }

    protected processDeleteCustomer(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    emailsAll(): Promise<EmailModel[]> {
        let url_ = this.baseUrl + "/api/Emails";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEmailsAll(_response);
        });
    }

    protected processEmailsAll(response: Response): Promise<EmailModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmailModel.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmailModel[]>(null as any);
    }

    /**
     * @return OK
     */
    emails(id: number): Promise<EmailModel> {
        let url_ = this.baseUrl + "/api/Emails/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEmails(_response);
        });
    }

    protected processEmails(response: Response): Promise<EmailModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmailModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmailModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body?: CreateEmailRequest | undefined): Promise<EmailModel> {
        let url_ = this.baseUrl + "/api/Emails/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<EmailModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmailModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmailModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: EmailModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Emails/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    delete(id: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Emails/Delete/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    getEmployees(): Promise<EmployeeModel[]> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployees";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmployees(_response);
        });
    }

    protected processGetEmployees(response: Response): Promise<EmployeeModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmployeeModel.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmployeeModel[]>(null as any);
    }

    /**
     * @return OK
     */
    getEmployee(id: number): Promise<EmployeeModel> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployee/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmployee(_response);
        });
    }

    protected processGetEmployee(response: Response): Promise<EmployeeModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmployeeModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmployeeModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createEmployee(body?: Employee | undefined): Promise<EmployeeModel> {
        let url_ = this.baseUrl + "/api/Employee/CreateEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateEmployee(_response);
        });
    }

    protected processCreateEmployee(response: Response): Promise<EmployeeModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmployeeModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmployeeModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateEmployee(body?: EmployeeModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Employee/UpdateEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateEmployee(_response);
        });
    }

    protected processUpdateEmployee(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    deleteEmployee(id: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Employee/DeleteEmployee/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteEmployee(_response);
        });
    }

    protected processDeleteEmployee(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    usersAll(): Promise<UserModel[]> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsersAll(_response);
        });
    }

    protected processUsersAll(response: Response): Promise<UserModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserModel.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModel[]>(null as any);
    }

    /**
     * @return OK
     */
    users(id: number): Promise<UserModel> {
        let url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsers(_response);
        });
    }

    protected processUsers(response: Response): Promise<UserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create2(body?: User | undefined): Promise<UserModel> {
        let url_ = this.baseUrl + "/api/Users/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate2(_response);
        });
    }

    protected processCreate2(response: Response): Promise<UserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update2(body?: UserModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate2(_response);
        });
    }

    protected processUpdate2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    delete2(id: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Users/Delete/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete2(_response);
        });
    }

    protected processDelete2(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class Address implements IAddress {
    addressId?: number;
    customerId?: number;
    street?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: number;
    country?: string | undefined;
    addressType?: string | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressId = _data["addressId"];
            this.customerId = _data["customerId"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.addressType = _data["addressType"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressId"] = this.addressId;
        data["customerId"] = this.customerId;
        data["street"] = this.street;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["addressType"] = this.addressType;
        return data;
    }
}

export interface IAddress {
    addressId?: number;
    customerId?: number;
    street?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: number;
    country?: string | undefined;
    addressType?: string | undefined;
}

export class AddressModel implements IAddressModel {
    addressId?: number;
    customerId?: number;
    street?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: number;
    country?: string | undefined;
    addressType?: string | undefined;

    constructor(data?: IAddressModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressId = _data["addressId"];
            this.customerId = _data["customerId"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.addressType = _data["addressType"];
        }
    }

    static fromJS(data: any): AddressModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddressModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressId"] = this.addressId;
        data["customerId"] = this.customerId;
        data["street"] = this.street;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["addressType"] = this.addressType;
        return data;
    }
}

export interface IAddressModel {
    addressId?: number;
    customerId?: number;
    street?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: number;
    country?: string | undefined;
    addressType?: string | undefined;
}

export class CreateEmailRequest implements ICreateEmailRequest {
    emailAddress?: string | undefined;
    emailType?: string | undefined;
    customerId?: number;

    constructor(data?: ICreateEmailRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.emailType = _data["emailType"];
            this.customerId = _data["customerId"];
        }
    }

    static fromJS(data: any): CreateEmailRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEmailRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["emailType"] = this.emailType;
        data["customerId"] = this.customerId;
        return data;
    }
}

export interface ICreateEmailRequest {
    emailAddress?: string | undefined;
    emailType?: string | undefined;
    customerId?: number;
}

export class Customer implements ICustomer {
    customerId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    customerType?: string | undefined;
    prefferedContactMethod?: string | undefined;
    companyName?: string | undefined;
    status?: string | undefined;
    customerNotes?: string | undefined;
    addresses?: Address[] | undefined;
    emails?: Email[] | undefined;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.customerType = _data["customerType"];
            this.prefferedContactMethod = _data["prefferedContactMethod"];
            this.companyName = _data["companyName"];
            this.status = _data["status"];
            this.customerNotes = _data["customerNotes"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["emails"])) {
                this.emails = [] as any;
                for (let item of _data["emails"])
                    this.emails!.push(Email.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["customerType"] = this.customerType;
        data["prefferedContactMethod"] = this.prefferedContactMethod;
        data["companyName"] = this.companyName;
        data["status"] = this.status;
        data["customerNotes"] = this.customerNotes;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.emails)) {
            data["emails"] = [];
            for (let item of this.emails)
                data["emails"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICustomer {
    customerId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    customerType?: string | undefined;
    prefferedContactMethod?: string | undefined;
    companyName?: string | undefined;
    status?: string | undefined;
    customerNotes?: string | undefined;
    addresses?: Address[] | undefined;
    emails?: Email[] | undefined;
}

export class CustomerModel implements ICustomerModel {
    customerId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    customerType?: string | undefined;
    prefferedContactMethod?: string | undefined;
    companyName?: string | undefined;
    status?: string | undefined;
    customerNotes?: string | undefined;
    emails?: EmailModel[] | undefined;

    constructor(data?: ICustomerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.customerType = _data["customerType"];
            this.prefferedContactMethod = _data["prefferedContactMethod"];
            this.companyName = _data["companyName"];
            this.status = _data["status"];
            this.customerNotes = _data["customerNotes"];
            if (Array.isArray(_data["emails"])) {
                this.emails = [] as any;
                for (let item of _data["emails"])
                    this.emails!.push(EmailModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomerModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["customerType"] = this.customerType;
        data["prefferedContactMethod"] = this.prefferedContactMethod;
        data["companyName"] = this.companyName;
        data["status"] = this.status;
        data["customerNotes"] = this.customerNotes;
        if (Array.isArray(this.emails)) {
            data["emails"] = [];
            for (let item of this.emails)
                data["emails"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICustomerModel {
    customerId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    customerType?: string | undefined;
    prefferedContactMethod?: string | undefined;
    companyName?: string | undefined;
    status?: string | undefined;
    customerNotes?: string | undefined;
    emails?: EmailModel[] | undefined;
}

export class CustomerWithFKsModel implements ICustomerWithFKsModel {
    customerId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    customerType?: string | undefined;
    prefferedContactMethod?: string | undefined;
    companyName?: string | undefined;
    status?: string | undefined;
    customerNotes?: string | undefined;
    addresses?: Address[] | undefined;

    constructor(data?: ICustomerWithFKsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.customerType = _data["customerType"];
            this.prefferedContactMethod = _data["prefferedContactMethod"];
            this.companyName = _data["companyName"];
            this.status = _data["status"];
            this.customerNotes = _data["customerNotes"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomerWithFKsModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerWithFKsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["customerType"] = this.customerType;
        data["prefferedContactMethod"] = this.prefferedContactMethod;
        data["companyName"] = this.companyName;
        data["status"] = this.status;
        data["customerNotes"] = this.customerNotes;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICustomerWithFKsModel {
    customerId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    customerType?: string | undefined;
    prefferedContactMethod?: string | undefined;
    companyName?: string | undefined;
    status?: string | undefined;
    customerNotes?: string | undefined;
    addresses?: Address[] | undefined;
}

export class Email implements IEmail {
    emailID?: number;
    customerId?: number;
    emailAddress?: string | undefined;
    emailType?: string | undefined;
    createdOn?: Date;
    customer?: Customer;

    constructor(data?: IEmail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailID = _data["emailID"];
            this.customerId = _data["customerId"];
            this.emailAddress = _data["emailAddress"];
            this.emailType = _data["emailType"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : undefined as any;
            this.customer = _data["customer"] ? Customer.fromJS(_data["customer"]) : undefined as any;
        }
    }

    static fromJS(data: any): Email {
        data = typeof data === 'object' ? data : {};
        let result = new Email();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailID"] = this.emailID;
        data["customerId"] = this.customerId;
        data["emailAddress"] = this.emailAddress;
        data["emailType"] = this.emailType;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : undefined as any;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined as any;
        return data;
    }
}

export interface IEmail {
    emailID?: number;
    customerId?: number;
    emailAddress?: string | undefined;
    emailType?: string | undefined;
    createdOn?: Date;
    customer?: Customer;
}

export class EmailModel implements IEmailModel {
    emailID?: number;
    customerId?: number;
    emailAddress?: string | undefined;
    emailType?: string | undefined;
    createdOn?: Date;

    constructor(data?: IEmailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailID = _data["emailID"];
            this.customerId = _data["customerId"];
            this.emailAddress = _data["emailAddress"];
            this.emailType = _data["emailType"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): EmailModel {
        data = typeof data === 'object' ? data : {};
        let result = new EmailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailID"] = this.emailID;
        data["customerId"] = this.customerId;
        data["emailAddress"] = this.emailAddress;
        data["emailType"] = this.emailType;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : undefined as any;
        return data;
    }
}

export interface IEmailModel {
    emailID?: number;
    customerId?: number;
    emailAddress?: string | undefined;
    emailType?: string | undefined;
    createdOn?: Date;
}

export class Employee implements IEmployee {
    employeeId!: number;
    accountId!: number;
    emailId!: number;
    name!: string | undefined;
    role!: string | undefined;

    constructor(data?: IEmployee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeId = _data["employeeId"];
            this.accountId = _data["accountId"];
            this.emailId = _data["emailId"];
            this.name = _data["name"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): Employee {
        data = typeof data === 'object' ? data : {};
        let result = new Employee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeId"] = this.employeeId;
        data["accountId"] = this.accountId;
        data["emailId"] = this.emailId;
        data["name"] = this.name;
        data["role"] = this.role;
        return data;
    }
}

export interface IEmployee {
    employeeId: number;
    accountId: number;
    emailId: number;
    name: string | undefined;
    role: string | undefined;
}

export class EmployeeModel implements IEmployeeModel {
    employeeId?: number;
    accountId!: number;
    emailId!: number;
    name!: string | undefined;
    role!: string | undefined;

    constructor(data?: IEmployeeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeId = _data["employeeId"];
            this.accountId = _data["accountId"];
            this.emailId = _data["emailId"];
            this.name = _data["name"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): EmployeeModel {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeId"] = this.employeeId;
        data["accountId"] = this.accountId;
        data["emailId"] = this.emailId;
        data["name"] = this.name;
        data["role"] = this.role;
        return data;
    }
}

export interface IEmployeeModel {
    employeeId?: number;
    accountId: number;
    emailId: number;
    name: string | undefined;
    role: string | undefined;
}

export class User implements IUser {
    id?: number;
    username?: string | undefined;
    email?: string | undefined;
    createdOn?: Date;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : undefined as any;
        return data;
    }
}

export interface IUser {
    id?: number;
    username?: string | undefined;
    email?: string | undefined;
    createdOn?: Date;
}

export class UserModel implements IUserModel {
    id?: number;
    username?: string | undefined;
    email?: string | undefined;
    createdOn?: Date;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : undefined as any;
        return data;
    }
}

export interface IUserModel {
    id?: number;
    username?: string | undefined;
    email?: string | undefined;
    createdOn?: Date;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}